const MentorPageLocators = require("../locators/MentorPageLocators");
const MentorPageMethod = require("../pages/MentorPageMethods");

const MentorData = require('../testdata/MentorPageData');
const CommonUtilities = require("../utilities/CommonUtilities");
const fs = require('fs');

describe('Mentor Page TestCases', function () {

    before(() => {
        CommonUtilities.open()
        CommonUtilities.login()
    });


    it('Mentor_TC_01: Should not allow creating mentor with blank fields', async function () {
        await MentorPageMethod.clickAccountManagement();
        await MentorPageMethod.clickRegisterMentor();
        MentorPageMethod.firstNameClick();
        // Do not enter any values for first name, last name, email, and employee ID
        MentorPageMethod.emptyFirstName;

    });


    it("Mentor_TC_02: Should not allow creating mentor with invalid first name", async function () {
       
        await MentorPageMethod.enterFirstName(MentorData.Mentor_TC_2.enterFirstName);
        await MentorPageMethod.enterLastName(MentorData.Mentor_TC_2.enterLastName);
        await MentorPageMethod.verifyInvalidFirstName();
        // Add assertions for other fields if required
      });
      it("Mentor_TC_03: Should not allow creating mentor with invalid last name", async function () {
       
        await MentorPageMethod.enterFirstName(MentorData.Mentor_TC_3.enterFirstName);
        await MentorPageMethod.enterLastName(MentorData.Mentor_TC_3.enterLastName);
        await MentorPageMethod.verifyInvalidFirstName();
        // Add assertions for other fields if required
      });


    it('Mentor_TC_04: Should not allow creating mentor with invalid email ID', async function () {
        await MentorPageMethod.enterLastName(MentorData.Mentor_TC_3.enterLastName);
        await MentorPageMethod.enterInvalidEmail('invalid_email'); // Invalid email ID
        await MentorPageMethod.verifyInvalidEmail();
    });
    it('Mentor_TC_05: Should not allow creating mentor with invalid employee ID', async function () {

        await MentorPageMethod.enterEmail(); // autogenerated email ID
        await MentorPageMethod.enterInvalidEmployeeID(MentorData.Mentor_TC_5.enterInvalidEmployeeID); // Use the generated employee ID
        await MentorPageMethod.verifyInvalidEmployeeID();
    });

    it('Mentor_TC_06: Successfully creating mentor using valid credentials', async function () {

        await MentorPageMethod.enterFirstName(MentorData.Mentor_TC_6.enterFirstName);
        await MentorPageMethod.enterLastName(MentorData.Mentor_TC_6.enterLastName);
        await MentorPageMethod.enterEmail(); // Use the generated email
        await MentorPageMethod.enterEmployeeID(); // Use the generated employee ID
        await MentorPageMethod.selectDepartent();
        await MentorPageMethod.clickRegister();
        await MentorPageMethod.verifyMentorRegistrationSuccess();

    });
    it('Mentor_TC_07: cancel the deleting option', async function () {
        await MentorPageMethod.clickKebabMenu();
        await MentorPageMethod.clickDeleteOption();
        await MentorPageMethod.clickCancelDelete();
    });
    it('Mentor_TC_08: successfully deleting the mentor', async function () {
        await MentorPageMethod.clickKebabMenu();
        await MentorPageMethod.clickDeleteOption();
        await MentorPageMethod.clickConfirmDelete();
        await MentorPageMethod.verifyDelete();
    });
    it('Mentor_TC_09: successfully update the mentor with edited first name', async function () {
        await MentorPageMethod.clickKebabMenu();
        await MentorPageMethod.clickEditOption();
        await MentorPageMethod.enterFirstName(MentorData.Mentor_TC_9.enterFirstName);
        await MentorPageMethod.clickUpdate();
        await MentorPageMethod.verifyUpdate();
    });
    it('Mentor_TC_010: successfully update the mentor with edited last name', async function () {
        await MentorPageMethod.clickKebabMenu();
        await MentorPageMethod.clickEditOption();
        await MentorPageMethod.enterLastName(MentorData.Mentor_TC_10.enterLastName);
        await MentorPageMethod.clickUpdate();
        await MentorPageMethod.verifyUpdate();
    });
    // it('Mentor_TC_011: should not be able to update with blank fields', async function () {
    //     await MentorPageMethod.clickKebabMenu();
    //     await MentorPageMethod.clickEditOption();
    //    // await MentorPageMethod.firstNameClick();
    //     CommonUtilities.clearField(MentorPageLocators.firstnamefield);
    //     await MentorPageMethod.emptyFirstName();
    // });
    it('Mentor_TC_12: move to next page', async function () {
        await MentorPageMethod.goToNextPageAndVerify();
        await pause(2000);
    });
    it('Mentor_TC_13: download CSV', async function () {
        
        await MentorPageMethod.clickImportOrExportButton();
        await MentorPageMethod.clickDownloadCSVButton();
        await MentorPageMethod.verifyFileDownloaded();
});
});
